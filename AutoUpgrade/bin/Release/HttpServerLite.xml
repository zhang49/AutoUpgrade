<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HttpServerLite</name>
    </assembly>
    <members>
        <member name="T:HttpServerLite.AccessControlManager">
            <summary>
            Access control manager.  Dictates which connections are permitted or denied.
            </summary>
        </member>
        <member name="F:HttpServerLite.AccessControlManager.DenyList">
            <summary>
            Matcher to match denied addresses.
            </summary>
        </member>
        <member name="F:HttpServerLite.AccessControlManager.PermitList">
            <summary>
            Matcher to match permitted addresses.
            </summary>
        </member>
        <member name="F:HttpServerLite.AccessControlManager.Mode">
            <summary>
            Access control mode, either DefaultPermit or DefaultDeny.
            DefaultPermit: allow everything, except for those explicitly denied.
            DefaultDeny: deny everything, except for those explicitly permitted.
            </summary>
        </member>
        <member name="M:HttpServerLite.AccessControlManager.#ctor(HttpServerLite.AccessControlMode)">
            <summary>
            Instantiate the object.
            </summary> 
            <param name="mode">Access control mode.</param>
        </member>
        <member name="M:HttpServerLite.AccessControlManager.Permit(System.String)">
            <summary>
            Permit or deny a request based on IP address.  
            When operating in 'default deny', only white listed entries are permitted. 
            When operating in 'default permit', everything is allowed unless explicitly denied.
            </summary>
            <param name="ip">The IP address to evaluate.</param>
            <returns>True if permitted.</returns>
        </member>
        <member name="T:HttpServerLite.AccessControlMode">
            <summary>
            Access control mode of operation.
            </summary>
        </member>
        <member name="F:HttpServerLite.AccessControlMode.DefaultPermit">
            <summary>
            Permit requests from any endpoint by default.
            </summary>
        </member>
        <member name="F:HttpServerLite.AccessControlMode.DefaultDeny">
            <summary>
            Deny requests from any endpoint by default.
            </summary>
        </member>
        <member name="T:HttpServerLite.Chunk">
            <summary>
            A chunk of data, used when reading from a request where the Transfer-Encoding header includes 'chunked'.
            </summary>
        </member>
        <member name="F:HttpServerLite.Chunk.Length">
            <summary>
            Length of the data.
            </summary>
        </member>
        <member name="F:HttpServerLite.Chunk.Data">
            <summary>
            Data.
            </summary>
        </member>
        <member name="F:HttpServerLite.Chunk.Metadata">
            <summary>
            Any additional metadata that appears on the length line after the length hex value and semicolon.
            </summary>
        </member>
        <member name="F:HttpServerLite.Chunk.IsFinalChunk">
            <summary>
            Indicates whether or not this is the final chunk, i.e. the chunk length received was zero.
            </summary>
        </member>
        <member name="T:HttpServerLite.ConnectionEventArgs">
            <summary>
            Connection received event arguments.
            </summary>
        </member>
        <member name="P:HttpServerLite.ConnectionEventArgs.Ip">
            <summary>
            IP address.
            </summary>
        </member>
        <member name="P:HttpServerLite.ConnectionEventArgs.Port">
            <summary>
            Port number.
            </summary>
        </member>
        <member name="T:HttpServerLite.ContentRoute">
            <summary>
            Assign a method handler for when requests are received matching the supplied method and path.
            </summary>
        </member>
        <member name="F:HttpServerLite.ContentRoute.Path">
            <summary>
            The pattern against which the raw URL should be matched.  
            </summary>
        </member>
        <member name="F:HttpServerLite.ContentRoute.IsDirectory">
            <summary>
            Indicates whether or not the path specifies a directory.  If so, any matching URL will be handled by the specified handler.
            </summary>
        </member>
        <member name="M:HttpServerLite.ContentRoute.#ctor(System.String,System.Boolean)">
            <summary>
            Create a new route object.
            </summary> 
            <param name="path">The pattern against which the raw URL should be matched.</param>
            <param name="isDirectory">Indicates whether or not the path specifies a directory.  If so, any matching URL will be handled by the specified handler.</param> 
        </member>
        <member name="T:HttpServerLite.ContentRouteManager">
            <summary>
            Content route manager.  Content routes are used for GET and HEAD requests to specific files or entire directories.
            </summary>
        </member>
        <member name="P:HttpServerLite.ContentRouteManager.BaseDirectory">
            <summary>
            Base directory for files and directories accessible via content routes.
            </summary>
        </member>
        <member name="M:HttpServerLite.ContentRouteManager.#ctor">
            <summary>
            Instantiate the object.
            </summary> 
        </member>
        <member name="M:HttpServerLite.ContentRouteManager.Add(System.String,System.Boolean)">
            <summary>
            Add a route.
            </summary>
            <param name="path">URL path, i.e. /path/to/resource.</param>
            <param name="isDirectory">True if the path represents a directory.</param>
        </member>
        <member name="M:HttpServerLite.ContentRouteManager.Remove(System.String)">
            <summary>
            Remove a route.
            </summary>
            <param name="path">URL path.</param>
        </member>
        <member name="M:HttpServerLite.ContentRouteManager.Get(System.String)">
            <summary>
            Retrieve a content route.
            </summary>
            <param name="path">URL path.</param>
            <returns>ContentRoute if the route exists, otherwise null.</returns>
        </member>
        <member name="M:HttpServerLite.ContentRouteManager.Exists(System.String)">
            <summary>
            Check if a content route exists.
            </summary>
            <param name="path">URL path.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="T:HttpServerLite.ContentRouteHandler">
            <summary>
            Content route handler.  Handles GET and HEAD requests to content routes for files and directories. 
            </summary>
        </member>
        <member name="F:HttpServerLite.ContentRouteHandler.ContentFileMode">
            <summary>
            The FileMode value to use when accessing files within a content route via a FileStream.  Default is FileMode.Open.
            </summary>
        </member>
        <member name="F:HttpServerLite.ContentRouteHandler.ContentFileAccess">
            <summary>
            The FileAccess value to use when accessing files within a content route via a FileStream.  Default is FileAccess.Read.
            </summary>
        </member>
        <member name="F:HttpServerLite.ContentRouteHandler.ContentFileShare">
            <summary>
            The FileShare value to use when accessing files within a content route via a FileStream.  Default is FileShare.Read.
            </summary>
        </member>
        <member name="T:HttpServerLite.DynamicRoute">
            <summary>
            Assign a method handler for when requests are received matching the supplied method and path regex.
            </summary>
        </member>
        <member name="F:HttpServerLite.DynamicRoute.Method">
            <summary>
            The HTTP method, i.e. GET, PUT, POST, DELETE, etc.
            </summary>
        </member>
        <member name="F:HttpServerLite.DynamicRoute.Path">
            <summary>
            The pattern against which the raw URL should be matched.  
            </summary>
        </member>
        <member name="F:HttpServerLite.DynamicRoute.Handler">
            <summary>
            The handler for the dynamic route.
            </summary>
        </member>
        <member name="M:HttpServerLite.DynamicRoute.#ctor(HttpServerLite.HttpMethod,System.Text.RegularExpressions.Regex,System.Func{HttpServerLite.HttpContext,System.Threading.Tasks.Task})">
            <summary>
            Create a new route object.
            </summary>
            <param name="method">The HTTP method, i.e. GET, PUT, POST, DELETE, etc.</param>
            <param name="path">The pattern against which the raw URL should be matched.</param>
            <param name="handler">The method that should be called to handle the request.</param>
        </member>
        <member name="T:HttpServerLite.DynamicRouteAttribute">
            <summary>
            Attribute that is used to mark methods as a dynamic route.
            </summary>
        </member>
        <member name="F:HttpServerLite.DynamicRouteAttribute.Method">
            <summary>
            The HTTP method, i.e. GET, PUT, POST, DELETE, etc.
            </summary>
        </member>
        <member name="F:HttpServerLite.DynamicRouteAttribute.Path">
            <summary>
            The pattern against which the raw URL should be matched. Must be convertible to a regular expression. 
            </summary>
        </member>
        <member name="M:HttpServerLite.DynamicRouteAttribute.#ctor(HttpServerLite.HttpMethod,System.String)">
            <summary>
            Instantiate the object.
            </summary>
            <param name="method">The HTTP method, i.e. GET, PUT, POST, DELETE, etc.</param>
            <param name="path">The regular expression pattern against which the raw URL should be matched.</param>
        </member>
        <member name="T:HttpServerLite.DynamicRouteManager">
            <summary>
            Dynamic route manager.  Dynamic routes are used for requests using any HTTP method to any path that can be matched by regular expression.
            </summary>
        </member>
        <member name="P:HttpServerLite.DynamicRouteManager.Matcher">
            <summary>
            Directly access the underlying regular expression matching library.
            This is helpful in case you want to specify the matching behavior should multiple matches exist.
            </summary>
        </member>
        <member name="M:HttpServerLite.DynamicRouteManager.#ctor">
            <summary>
            Instantiate the object.
            </summary> 
        </member>
        <member name="M:HttpServerLite.DynamicRouteManager.Add(HttpServerLite.HttpMethod,System.Text.RegularExpressions.Regex,System.Func{HttpServerLite.HttpContext,System.Threading.Tasks.Task})">
            <summary>
            Add a route.
            </summary>
            <param name="method">The HTTP method.</param>
            <param name="path">URL path, i.e. /path/to/resource.</param>
            <param name="handler">Method to invoke.</param>
        </member>
        <member name="M:HttpServerLite.DynamicRouteManager.Remove(HttpServerLite.HttpMethod,System.Text.RegularExpressions.Regex)">
            <summary>
            Remove a route.
            </summary>
            <param name="method">The HTTP method.</param>
            <param name="path">URL path.</param>
        </member>
        <member name="M:HttpServerLite.DynamicRouteManager.Exists(HttpServerLite.HttpMethod,System.Text.RegularExpressions.Regex)">
            <summary>
            Check if a route exists.
            </summary>
            <param name="method">The HTTP method.</param>
            <param name="path">URL path.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:HttpServerLite.DynamicRouteManager.Match(HttpServerLite.HttpMethod,System.String)">
            <summary>
            Match a request method and URL to a handler method.
            </summary>
            <param name="method">The HTTP method.</param>
            <param name="path">URL path.</param>
            <returns>Method to invoke.</returns>
        </member>
        <member name="T:HttpServerLite.ExceptionEventArgs">
            <summary>
            Exception event arguments.
            </summary>
        </member>
        <member name="P:HttpServerLite.ExceptionEventArgs.Ip">
            <summary>
            IP address.
            </summary>
        </member>
        <member name="P:HttpServerLite.ExceptionEventArgs.Port">
            <summary>
            Port number.
            </summary>
        </member>
        <member name="P:HttpServerLite.ExceptionEventArgs.Method">
            <summary>
            HTTP method.
            </summary>
        </member>
        <member name="P:HttpServerLite.ExceptionEventArgs.Url">
            <summary>
            URL.
            </summary>
        </member>
        <member name="P:HttpServerLite.ExceptionEventArgs.Query">
            <summary>
            Request query.
            </summary>
        </member>
        <member name="P:HttpServerLite.ExceptionEventArgs.RequestHeaders">
            <summary>
            Request headers.
            </summary>
        </member>
        <member name="P:HttpServerLite.ExceptionEventArgs.RequestContentLength">
            <summary>
            Content length.
            </summary>
        </member>
        <member name="P:HttpServerLite.ExceptionEventArgs.StatusCode">
            <summary>
            Response status.
            </summary>
        </member>
        <member name="P:HttpServerLite.ExceptionEventArgs.ResponseHeaders">
            <summary>
            Response headers.
            </summary>
        </member>
        <member name="P:HttpServerLite.ExceptionEventArgs.ResponseContentLength">
            <summary>
            Response content length.
            </summary>
        </member>
        <member name="P:HttpServerLite.ExceptionEventArgs.Exception">
            <summary>
            Exception.
            </summary>
        </member>
        <member name="T:HttpServerLite.HttpContext">
            <summary>
            HTTP context including both request and response.
            </summary>
        </member>
        <member name="P:HttpServerLite.HttpContext.Request">
            <summary>
            The HTTP request that was received.
            </summary>
        </member>
        <member name="P:HttpServerLite.HttpContext.RouteType">
            <summary>
            Type of route.
            </summary>
        </member>
        <member name="P:HttpServerLite.HttpContext.Route">
            <summary>
            Matched route.
            </summary>
        </member>
        <member name="P:HttpServerLite.HttpContext.Response">
            <summary>
            The HTTP response that will be sent.  This object is preconstructed on your behalf and can be modified directly.
            </summary>
        </member>
        <member name="M:HttpServerLite.HttpContext.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="M:HttpServerLite.HttpContext.ToJson(System.Boolean)">
            <summary>
            Retrieve a JSON-encoded version of the context object.
            </summary>
            <param name="pretty">True to enable pretty print.</param>
            <returns>JSON string.</returns>
        </member>
        <member name="T:HttpServerLite.HttpMethod">
            <summary>
            HTTP methods, i.e. GET, PUT, POST, DELETE, etc.
            </summary>
        </member>
        <member name="F:HttpServerLite.HttpMethod.GET">
            <summary>
            HTTP GET.
            </summary>
        </member>
        <member name="F:HttpServerLite.HttpMethod.HEAD">
            <summary>
            HTTP HEAD.
            </summary>
        </member>
        <member name="F:HttpServerLite.HttpMethod.PUT">
            <summary>
            HTTP PUT.
            </summary>
        </member>
        <member name="F:HttpServerLite.HttpMethod.POST">
            <summary>
            HTTP POST.
            </summary>
        </member>
        <member name="F:HttpServerLite.HttpMethod.DELETE">
            <summary>
            HTTP DELETE.
            </summary>
        </member>
        <member name="F:HttpServerLite.HttpMethod.PATCH">
            <summary>
            HTTP PATCH.
            </summary>
        </member>
        <member name="F:HttpServerLite.HttpMethod.CONNECT">
            <summary>
            HTTP CONNECT.
            </summary>
        </member>
        <member name="F:HttpServerLite.HttpMethod.OPTIONS">
            <summary>
            HTTP OPTIONS.
            </summary>
        </member>
        <member name="F:HttpServerLite.HttpMethod.TRACE">
            <summary>
            HTTP TRACE.
            </summary>
        </member>
        <member name="T:HttpServerLite.HttpRequest">
            <summary>
            Data extracted from an incoming HTTP request.
            </summary>
        </member>
        <member name="P:HttpServerLite.HttpRequest.TimestampUtc">
            <summary>
            UTC timestamp from when the request was received.
            </summary>
        </member>
        <member name="P:HttpServerLite.HttpRequest.ThreadId">
            <summary>
            Thread ID on which the request exists.
            </summary>
        </member>
        <member name="P:HttpServerLite.HttpRequest.ProtocolVersion">
            <summary>
            The protocol and version.
            </summary>
        </member>
        <member name="P:HttpServerLite.HttpRequest.Source">
            <summary>
            Source (requestor) IP and port information.
            </summary>
        </member>
        <member name="P:HttpServerLite.HttpRequest.Method">
            <summary>
            The HTTP method used in the request.
            </summary>
        </member>
        <member name="P:HttpServerLite.HttpRequest.Url">
            <summary>
            URL details.
            </summary>
        </member>
        <member name="P:HttpServerLite.HttpRequest.Query">
            <summary>
            Query details.
            </summary>
        </member>
        <member name="P:HttpServerLite.HttpRequest.Headers">
            <summary>
            The headers found in the request.
            </summary>
        </member>
        <member name="P:HttpServerLite.HttpRequest.Keepalive">
            <summary>
            Specifies whether or not the client requested HTTP keepalives.
            </summary>
        </member>
        <member name="P:HttpServerLite.HttpRequest.ChunkedTransfer">
            <summary>
            Indicates whether or not chunked transfer encoding was detected.
            </summary>
        </member>
        <member name="P:HttpServerLite.HttpRequest.Gzip">
            <summary>
            Indicates whether or not the payload has been gzip compressed.
            </summary>
        </member>
        <member name="P:HttpServerLite.HttpRequest.Deflate">
            <summary>
            Indicates whether or not the payload has been deflate compressed.
            </summary>
        </member>
        <member name="P:HttpServerLite.HttpRequest.Useragent">
            <summary>
            The useragent specified in the request.
            </summary>
        </member>
        <member name="P:HttpServerLite.HttpRequest.ContentType">
            <summary>
            The content type as specified by the requestor (client).
            </summary>
        </member>
        <member name="P:HttpServerLite.HttpRequest.ContentLength">
            <summary>
            The number of bytes in the request body.
            </summary>
        </member>
        <member name="P:HttpServerLite.HttpRequest.Data">
            <summary>
            Bytes from the DataStream property.  Using Data will fully read the DataStream property and thus it cannot be read again.
            </summary>
        </member>
        <member name="P:HttpServerLite.HttpRequest.DataStream">
            <summary>
            The stream containing request data.
            </summary>
        </member>
        <member name="M:HttpServerLite.HttpRequest.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="M:HttpServerLite.HttpRequest.#ctor(System.String,System.IO.Stream,System.String)">
            <summary>
            Create an HttpRequest.
            </summary>
            <param name="ipPort">IP:port of the requestor.</param>
            <param name="stream">Client stream.</param>
            <param name="requestHeader">Request header.</param>
            <returns>HttpRequest.</returns>
        </member>
        <member name="M:HttpServerLite.HttpRequest.ToJson(System.Boolean)">
            <summary>
            Retrieve a JSON-encoded version of the request object.
            </summary>
            <param name="pretty">True to enable pretty print.</param>
            <returns>JSON string.</returns>
        </member>
        <member name="M:HttpServerLite.HttpRequest.RetrieveHeaderValue(System.String)">
            <summary>
            Retrieve a specified header value from either the headers or the querystring (case insensitive).
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:HttpServerLite.HttpRequest.HeaderExists(System.String,System.Boolean)">
            <summary>
            Determine if a header exists.
            </summary>
            <param name="key">Header key.</param>
            <param name="caseSensitive">Specify whether a case sensitive search should be used.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:HttpServerLite.HttpRequest.QuerystringExists(System.String,System.Boolean)">
            <summary>
            Determine if a querystring entry exists.
            </summary>
            <param name="key">Querystring key.</param>
            <param name="caseSensitive">Specify whether a case sensitive search should be used.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:HttpServerLite.HttpRequest.DataAsString">
            <summary>
            Read the data stream fully and retrieve the string data contained within.
            Note: if you use this method, you will not be able to read from the data stream afterward.
            </summary>
            <returns>String.</returns>
        </member>
        <member name="M:HttpServerLite.HttpRequest.DataAsJsonObject``1">
            <summary>
            Read the data stream fully and convert the data to the object type specified using JSON deserialization.
            Note: if you use this method, you will not be able to read from the data stream afterward.
            </summary>
            <typeparam name="T">Type.</typeparam>
            <returns>Object of type specified.</returns>
        </member>
        <member name="T:HttpServerLite.HttpRequest.SourceDetails">
            <summary>
            Source details.
            </summary>
        </member>
        <member name="P:HttpServerLite.HttpRequest.SourceDetails.IpAddress">
            <summary>
            IP address of the requestor.
            </summary>
        </member>
        <member name="P:HttpServerLite.HttpRequest.SourceDetails.Port">
            <summary>
            TCP port from which the request originated on the requestor.
            </summary>
        </member>
        <member name="M:HttpServerLite.HttpRequest.SourceDetails.#ctor">
            <summary>
            Source details.
            </summary>
        </member>
        <member name="M:HttpServerLite.HttpRequest.SourceDetails.#ctor(System.String,System.Int32)">
            <summary>
            Source details.
            </summary>
            <param name="ip">IP address of the requestor.</param>
            <param name="port">TCP port from which the request originated on the requestor.</param>
        </member>
        <member name="T:HttpServerLite.HttpRequest.UrlDetails">
            <summary>
            URL details of the request.
            </summary>
        </member>
        <member name="P:HttpServerLite.HttpRequest.UrlDetails.Full">
            <summary>
            Full URL.
            </summary>
        </member>
        <member name="P:HttpServerLite.HttpRequest.UrlDetails.WithoutQuery">
            <summary>
            Raw URL without query.
            </summary>
        </member>
        <member name="P:HttpServerLite.HttpRequest.UrlDetails.Elements">
            <summary>
            Raw URL elements.
            </summary>
        </member>
        <member name="P:HttpServerLite.HttpRequest.UrlDetails.Parameters">
            <summary>
            Parameters found within the URL, if using parameter routes.
            </summary>
        </member>
        <member name="M:HttpServerLite.HttpRequest.UrlDetails.#ctor">
            <summary>
            URL details.
            </summary>
        </member>
        <member name="M:HttpServerLite.HttpRequest.UrlDetails.#ctor(System.String)">
            <summary>
            URL details.
            </summary>
            <param name="fullUrl">Full URL.</param> 
        </member>
        <member name="T:HttpServerLite.HttpRequest.QueryDetails">
            <summary>
            Query details.
            </summary>
        </member>
        <member name="P:HttpServerLite.HttpRequest.QueryDetails.Querystring">
            <summary>
            Querystring, excluding the leading '?'.
            </summary>
        </member>
        <member name="P:HttpServerLite.HttpRequest.QueryDetails.Elements">
            <summary>
            Query elements.
            </summary>
        </member>
        <member name="M:HttpServerLite.HttpRequest.QueryDetails.#ctor">
            <summary>
            Query details.
            </summary>
        </member>
        <member name="M:HttpServerLite.HttpRequest.QueryDetails.#ctor(System.String)">
            <summary>
            Query details.
            </summary>
            <param name="fullUrl">Full URL.</param>
        </member>
        <member name="T:HttpServerLite.HttpResponse">
            <summary>
            Response to an HTTP request.
            </summary>
        </member>
        <member name="P:HttpServerLite.HttpResponse.ProtocolVersion">
            <summary>
            The protocol and version.
            </summary>
        </member>
        <member name="F:HttpServerLite.HttpResponse.StatusCode">
            <summary>
            The HTTP status code to return to the requestor (client).
            </summary>
        </member>
        <member name="F:HttpServerLite.HttpResponse.StatusDescription">
            <summary>
            The HTTP status description to return to the requestor (client).
            </summary>
        </member>
        <member name="P:HttpServerLite.HttpResponse.Headers">
            <summary>
            User-supplied headers to include in the response.
            </summary>
        </member>
        <member name="F:HttpServerLite.HttpResponse.ContentType">
            <summary>
            User-supplied content-type to include in the response.
            </summary>
        </member>
        <member name="F:HttpServerLite.HttpResponse.ContentLength">
            <summary>
            The length of the supplied response data.
            </summary>
        </member>
        <member name="M:HttpServerLite.HttpResponse.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="M:HttpServerLite.HttpResponse.ToJson(System.Boolean)">
            <summary>
            Retrieve a JSON-encoded version of the response object.
            </summary>
            <param name="pretty">True to enable pretty print.</param>
            <returns>JSON string.</returns>
        </member>
        <member name="M:HttpServerLite.HttpResponse.Send(System.Boolean)">
            <summary>
            Send headers and no data to the requestor and terminate the connection.
            </summary> 
        </member>
        <member name="M:HttpServerLite.HttpResponse.Send(System.Int64)">
            <summary>
            Send headers with a specified content length and no data to the requestor and terminate the connection.  Useful for HEAD requests where the content length must be set.
            </summary> 
            <param name="contentLength">Value to set in Content-Length header.</param>
        </member>
        <member name="M:HttpServerLite.HttpResponse.Send(System.String)">
            <summary>
            Send headers and data to the requestor and terminate the connection.
            </summary>
            <param name="data">Data.</param> 
        </member>
        <member name="M:HttpServerLite.HttpResponse.Send(System.Byte[])">
            <summary>
            Send headers and data to the requestor and terminate the connection.
            </summary>
            <param name="data">Data.</param> 
        </member>
        <member name="M:HttpServerLite.HttpResponse.Send(System.Int64,System.IO.Stream)">
            <summary>
            Send headers and data to the requestor and terminate the connection.
            </summary>
            <param name="contentLength">Number of bytes to read from the stream.</param>
            <param name="stream">Stream containing response data.</param>
        </member>
        <member name="M:HttpServerLite.HttpResponse.SendAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Send headers with a specified content length and no data to the requestor and terminate the connection.  Useful for HEAD requests where the content length must be set.
            </summary> 
            <param name="contentLength">Value to set in Content-Length header.</param>
            <param name="token">Cancellation token for canceling the request.</param>
        </member>
        <member name="M:HttpServerLite.HttpResponse.SendAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Send headers and data to the requestor and terminate the connection.
            </summary>
            <param name="data">Data.</param> 
            <param name="token">Cancellation token for canceling the request.</param>
        </member>
        <member name="M:HttpServerLite.HttpResponse.SendAsync(System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Send headers and data to the requestor and terminate the connection.
            </summary>
            <param name="data">Data.</param> 
            <param name="token">Cancellation token for canceling the request.</param>
        </member>
        <member name="M:HttpServerLite.HttpResponse.SendAsync(System.Int64,System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Send headers and data to the requestor and terminate the connection.
            </summary>
            <param name="contentLength">Number of bytes to read from the stream.</param>
            <param name="stream">Stream containing response data.</param>
            <param name="token">Cancellation token for canceling the request.</param>
        </member>
        <member name="M:HttpServerLite.HttpResponse.SendWithoutClose(System.Int64)">
            <summary>
            Send headers and data to the requestor but do not terminate the connection.
            </summary>
            <param name="contentLength">Value to set in Content-Length header.</param>
        </member>
        <member name="M:HttpServerLite.HttpResponse.SendWithoutClose(System.String)">
            <summary>
            Send headers and data to the requestor but do not terminate the connection.
            </summary>
            <param name="data">Data.</param> 
        </member>
        <member name="M:HttpServerLite.HttpResponse.SendWithoutClose(System.Byte[])">
            <summary>
            Send headers and data to the requestor but do not terminate the connection.
            </summary>
            <param name="data">Data.</param> 
        </member>
        <member name="M:HttpServerLite.HttpResponse.SendWithoutClose(System.Int64,System.IO.Stream)">
            <summary>
            Send headers and data to the requestor but do not terminate the connection.
            </summary>
            <param name="contentLength">Number of bytes to read from the stream.</param>
            <param name="stream">Stream containing response data.</param>
        </member>
        <member name="M:HttpServerLite.HttpResponse.SendWithoutCloseAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Send headers and data to the requestor but do not terminate the connection.
            </summary>
            <param name="contentLength">Value to set in Content-Length header.</param>
            <param name="token">Cancellation token for canceling the request.</param>
        </member>
        <member name="M:HttpServerLite.HttpResponse.SendWithoutCloseAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Send headers and data to the requestor but do not terminate the connection.
            </summary>
            <param name="data">Data.</param> 
            <param name="token">Cancellation token for canceling the request.</param>
        </member>
        <member name="M:HttpServerLite.HttpResponse.SendWithoutCloseAsync(System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Send headers and data to the requestor but do not terminate the connection.
            </summary>
            <param name="data">Data.</param> 
            <param name="token">Cancellation token for canceling the request.</param>
        </member>
        <member name="M:HttpServerLite.HttpResponse.SendWithoutCloseAsync(System.Int64,System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Send headers and data to the requestor but do not terminate the connection.
            </summary>
            <param name="contentLength">Number of bytes to read from the stream.</param>
            <param name="stream">Stream containing response data.</param>
            <param name="token">Cancellation token for canceling the request.</param>
        </member>
        <member name="M:HttpServerLite.HttpResponse.Close">
            <summary>
            Close the connection.
            </summary>
        </member>
        <member name="T:HttpServerLite.MimeTypes">
            <summary>
            MIME types and file extensions.
            </summary>
        </member>
        <member name="M:HttpServerLite.MimeTypes.#ctor">
            <summary>
            Instantiates the object.
            </summary>
        </member>
        <member name="M:HttpServerLite.MimeTypes.GetFromExtension(System.String)">
            <summary>
            Retrieve MIME type from file extension.
            </summary>
            <param name="extension">File extension.</param>
            <returns>String containing MIME type.</returns>
        </member>
        <member name="T:HttpServerLite.ParameterRoute">
            <summary>
            Assign a method handler for when requests are received matching the supplied method and path containing parameters.
            </summary>
        </member>
        <member name="F:HttpServerLite.ParameterRoute.Method">
            <summary>
            The HTTP method, i.e. GET, PUT, POST, DELETE, etc.
            </summary>
        </member>
        <member name="F:HttpServerLite.ParameterRoute.Path">
            <summary>
            The pattern against which the raw URL should be matched.  
            </summary>
        </member>
        <member name="F:HttpServerLite.ParameterRoute.Handler">
            <summary>
            The handler for the parameter route.
            </summary>
        </member>
        <member name="M:HttpServerLite.ParameterRoute.#ctor(HttpServerLite.HttpMethod,System.String,System.Func{HttpServerLite.HttpContext,System.Threading.Tasks.Task})">
            <summary>
            Create a new route object.
            </summary>
            <param name="method">The HTTP method, i.e. GET, PUT, POST, DELETE, etc.</param>
            <param name="path">The pattern against which the raw URL should be matched.</param>
            <param name="handler">The method that should be called to handle the request.</param>
        </member>
        <member name="T:HttpServerLite.ParameterRouteAttribute">
            <summary>
            Attribute that is used to mark methods as a parameter route.
            </summary>
        </member>
        <member name="F:HttpServerLite.ParameterRouteAttribute.Path">
            <summary>
            The path to match, i.e. /{version}/api/{id}.
            If a match is found, the Dictionary found in HttpRequest.Url.Parameters will contain keys for 'version' and 'id'.
            </summary>
        </member>
        <member name="F:HttpServerLite.ParameterRouteAttribute.Method">
            <summary>
            The HTTP method, i.e. GET, PUT, POST, DELETE, etc.
            </summary>
        </member>
        <member name="M:HttpServerLite.ParameterRouteAttribute.#ctor(HttpServerLite.HttpMethod,System.String)">
            <summary>
            Instantiate the object.
            </summary>
            <param name="method">The HTTP method, i.e. GET, PUT, POST, DELETE, etc.</param>
            <param name="path">The path to match, i.e. /{version}/api/{id}.</param>
        </member>
        <member name="T:HttpServerLite.ParameterRouteManager">
            <summary>
            Parameter route manager.  Parameter routes are used for requests using any HTTP method to any path where parameters are defined in the URL.
            For example, /{version}/api.
            For a matching URL, the HttpRequest.Url.Parameters will contain a key called 'version' with the value found in the URL.
            </summary>
        </member>
        <member name="P:HttpServerLite.ParameterRouteManager.Matcher">
            <summary>
            Directly access the underlying URL matching library.
            This is helpful in case you want to specify the matching behavior should multiple matches exist.
            </summary>
        </member>
        <member name="M:HttpServerLite.ParameterRouteManager.#ctor">
            <summary>
            Instantiate the object.
            </summary> 
        </member>
        <member name="M:HttpServerLite.ParameterRouteManager.Add(HttpServerLite.HttpMethod,System.String,System.Func{HttpServerLite.HttpContext,System.Threading.Tasks.Task})">
            <summary>
            Add a route.
            </summary>
            <param name="method">The HTTP method.</param>
            <param name="path">URL path, i.e. /path/to/resource.</param>
            <param name="handler">Method to invoke.</param>
        </member>
        <member name="M:HttpServerLite.ParameterRouteManager.Remove(HttpServerLite.HttpMethod,System.String)">
            <summary>
            Remove a route.
            </summary>
            <param name="method">The HTTP method.</param>
            <param name="path">URL path.</param>
        </member>
        <member name="M:HttpServerLite.ParameterRouteManager.Exists(HttpServerLite.HttpMethod,System.String)">
            <summary>
            Check if a content route exists.
            </summary>
            <param name="method">The HTTP method.</param>
            <param name="path">URL path.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:HttpServerLite.ParameterRouteManager.Match(HttpServerLite.HttpMethod,System.String,System.Collections.Generic.Dictionary{System.String,System.String}@)">
            <summary>
            Match a request method and URL to a handler method.
            </summary>
            <param name="method">The HTTP method.</param>
            <param name="path">URL path.</param>
            <param name="vals">Values extracted from the URL.</param>
            <returns>True if match exists.</returns>
        </member>
        <member name="T:HttpServerLite.RequestEventArgs">
            <summary>
            Request event arguments.
            </summary>
        </member>
        <member name="P:HttpServerLite.RequestEventArgs.Ip">
            <summary>
            IP address.
            </summary>
        </member>
        <member name="P:HttpServerLite.RequestEventArgs.Port">
            <summary>
            Port number.
            </summary>
        </member>
        <member name="P:HttpServerLite.RequestEventArgs.Method">
            <summary>
            HTTP method.
            </summary>
        </member>
        <member name="P:HttpServerLite.RequestEventArgs.Url">
            <summary>
            URL.
            </summary>
        </member>
        <member name="P:HttpServerLite.RequestEventArgs.Query">
            <summary>
            Query found in the URL.
            </summary>
        </member>
        <member name="P:HttpServerLite.RequestEventArgs.Headers">
            <summary>
            Request headers.
            </summary>
        </member>
        <member name="P:HttpServerLite.RequestEventArgs.ContentLength">
            <summary>
            Content length.
            </summary>
        </member>
        <member name="T:HttpServerLite.ResponseEventArgs">
            <summary>
            Response event arguments.
            </summary>
        </member>
        <member name="P:HttpServerLite.ResponseEventArgs.Ip">
            <summary>
            IP address.
            </summary>
        </member>
        <member name="P:HttpServerLite.ResponseEventArgs.Port">
            <summary>
            Port number.
            </summary>
        </member>
        <member name="P:HttpServerLite.ResponseEventArgs.Method">
            <summary>
            HTTP method.
            </summary>
        </member>
        <member name="P:HttpServerLite.ResponseEventArgs.Url">
            <summary>
            URL.
            </summary>
        </member>
        <member name="P:HttpServerLite.ResponseEventArgs.Query">
            <summary>
            Request query.
            </summary>
        </member>
        <member name="P:HttpServerLite.ResponseEventArgs.RequestHeaders">
            <summary>
            Request headers.
            </summary>
        </member>
        <member name="P:HttpServerLite.ResponseEventArgs.RequestContentLength">
            <summary>
            Content length.
            </summary>
        </member>
        <member name="P:HttpServerLite.ResponseEventArgs.StatusCode">
            <summary>
            Response status.
            </summary>
        </member>
        <member name="P:HttpServerLite.ResponseEventArgs.ResponseHeaders">
            <summary>
            Response headers.
            </summary>
        </member>
        <member name="P:HttpServerLite.ResponseEventArgs.ResponseContentLength">
            <summary>
            Response content length.
            </summary>
        </member>
        <member name="P:HttpServerLite.ResponseEventArgs.TotalMs">
            <summary>
            Total time in processing the request and sending the response, in milliseconds.
            </summary>
        </member>
        <member name="T:HttpServerLite.RouteTypeEnum">
            <summary>
            Route type.
            </summary>
        </member>
        <member name="F:HttpServerLite.RouteTypeEnum.Default">
            <summary>
            Default route.
            </summary>
        </member>
        <member name="F:HttpServerLite.RouteTypeEnum.Content">
            <summary>
            Content route.
            </summary>
        </member>
        <member name="F:HttpServerLite.RouteTypeEnum.Static">
            <summary>
            Static route.
            </summary>
        </member>
        <member name="F:HttpServerLite.RouteTypeEnum.Parameter">
            <summary>
            Parameter route.
            </summary>
        </member>
        <member name="F:HttpServerLite.RouteTypeEnum.Dynamic">
            <summary>
            Dynamic route.
            </summary>
        </member>
        <member name="T:HttpServerLite.StaticRoute">
            <summary>
            Assign a method handler for when requests are received matching the supplied method and path.
            </summary>
        </member>
        <member name="F:HttpServerLite.StaticRoute.Method">
            <summary>
            The HTTP method, i.e. GET, PUT, POST, DELETE, etc.
            </summary>
        </member>
        <member name="F:HttpServerLite.StaticRoute.Path">
            <summary>
            The raw URL, i.e. /foo/bar/.  Be sure this begins and ends with '/'.
            </summary>
        </member>
        <member name="F:HttpServerLite.StaticRoute.Handler">
            <summary>
            The 
            </summary>
        </member>
        <member name="M:HttpServerLite.StaticRoute.#ctor(HttpServerLite.HttpMethod,System.String,System.Func{HttpServerLite.HttpContext,System.Threading.Tasks.Task})">
            <summary>
            Create a new route object.
            </summary>
            <param name="method">The HTTP method, i.e. GET, PUT, POST, DELETE, etc.</param>
            <param name="path">The raw URL, i.e. /foo/bar/.  Be sure this begins and ends with '/'.</param>
            <param name="handler">The method that should be called to handle the request.</param>
        </member>
        <member name="T:HttpServerLite.StaticRouteAttribute">
            <summary>
            Attribute that is used to mark methods as a static route.
            </summary>
        </member>
        <member name="F:HttpServerLite.StaticRouteAttribute.Path">
            <summary>
            The raw URL, i.e. /foo/bar/.  Be sure this begins and ends with '/'.
            </summary>
        </member>
        <member name="F:HttpServerLite.StaticRouteAttribute.Method">
            <summary>
            The HTTP method, i.e. GET, PUT, POST, DELETE, etc.
            </summary>
        </member>
        <member name="M:HttpServerLite.StaticRouteAttribute.#ctor(HttpServerLite.HttpMethod,System.String)">
            <summary>
            Instantiate the object.
            </summary>
            <param name="method">The HTTP method, i.e. GET, PUT, POST, DELETE, etc.</param>
            <param name="path">The raw URL, i.e. /foo/bar/.  Be sure this begins and ends with '/'.</param>
        </member>
        <member name="T:HttpServerLite.StaticRouteManager">
            <summary>
            Static route manager.  Static routes are used for requests using any HTTP method to a specific path.
            </summary>
        </member>
        <member name="M:HttpServerLite.StaticRouteManager.#ctor">
            <summary>
            Instantiate the object.
            </summary> 
        </member>
        <member name="M:HttpServerLite.StaticRouteManager.Add(HttpServerLite.HttpMethod,System.String,System.Func{HttpServerLite.HttpContext,System.Threading.Tasks.Task})">
            <summary>
            Add a route.
            </summary>
            <param name="method">The HTTP method.</param>
            <param name="path">URL path, i.e. /path/to/resource.</param>
            <param name="handler">Method to invoke.</param>
        </member>
        <member name="M:HttpServerLite.StaticRouteManager.Remove(HttpServerLite.HttpMethod,System.String)">
            <summary>
            Remove a route.
            </summary>
            <param name="method">The HTTP method.</param>
            <param name="path">URL path.</param>
        </member>
        <member name="M:HttpServerLite.StaticRouteManager.All">
            <summary>
            Retrieve all static routes.
            </summary>
            <returns>List of StaticRoute.</returns>
        </member>
        <member name="M:HttpServerLite.StaticRouteManager.Get(HttpServerLite.HttpMethod,System.String)">
            <summary>
            Retrieve a static route.
            </summary>
            <param name="method">The HTTP method.</param>
            <param name="path">URL path.</param>
            <returns>StaticRoute if the route exists, otherwise null.</returns>
        </member>
        <member name="M:HttpServerLite.StaticRouteManager.Exists(HttpServerLite.HttpMethod,System.String)">
            <summary>
            Check if a static route exists.
            </summary>
            <param name="method">The HTTP method.</param>
            <param name="path">URL path.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:HttpServerLite.StaticRouteManager.Match(HttpServerLite.HttpMethod,System.String)">
            <summary>
            Match a request method and URL to a handler method.
            </summary>
            <param name="method">The HTTP method.</param>
            <param name="path">URL path.</param>
            <returns>Method to invoke.</returns>
        </member>
        <member name="T:HttpServerLite.Webserver">
            <summary>
            HttpServerLite web server.
            </summary>
        </member>
        <member name="P:HttpServerLite.Webserver.IsListening">
            <summary>
            Indicates if the server is listening for connections.
            </summary>
        </member>
        <member name="P:HttpServerLite.Webserver.Connections">
            <summary>
            List connections by requestor IP:port.
            </summary>
        </member>
        <member name="P:HttpServerLite.Webserver.Settings">
            <summary>
            Webserver settings.
            </summary>
        </member>
        <member name="P:HttpServerLite.Webserver.Events">
            <summary>
            Event handlers for webserver events.
            </summary>
        </member>
        <member name="P:HttpServerLite.Webserver.Routes">
            <summary>
            Webserver routes.
            </summary>
        </member>
        <member name="P:HttpServerLite.Webserver.Pages">
            <summary>
            Default pages served by the webserver.
            </summary>
        </member>
        <member name="P:HttpServerLite.Webserver.Statistics">
            <summary>
            Webserver statistics.
            </summary>
        </member>
        <member name="M:HttpServerLite.Webserver.#ctor">
            <summary>
            Instantiate the webserver without SSL listening on localhost port 8080.
            </summary>
        </member>
        <member name="M:HttpServerLite.Webserver.#ctor(System.Func{HttpServerLite.HttpContext,System.Threading.Tasks.Task})">
            <summary>
            Instantiate the webserver without SSL listening on localhost port 8080 and using the specified default route.
            </summary>
            <param name="defaultRoute">Default route.</param>
        </member>
        <member name="M:HttpServerLite.Webserver.#ctor(HttpServerLite.WebserverSettings)">
            <summary>
            Instantiate the webserver using the specified settings.
            </summary>
            <param name="settings">Webserver settings.</param>
        </member>
        <member name="M:HttpServerLite.Webserver.#ctor(System.String,System.Int32,System.Func{HttpServerLite.HttpContext,System.Threading.Tasks.Task})">
            <summary>
            Instantiate the webserver without SSL.
            </summary>
            <param name="hostname">Hostname or IP address on which to listen.</param>
            <param name="port">TCP port on which to listen.</param>
            <param name="defaultRoute">Default route.</param>
        </member>
        <member name="M:HttpServerLite.Webserver.#ctor(System.String,System.Int32,System.Boolean,System.String,System.String,System.Func{HttpServerLite.HttpContext,System.Threading.Tasks.Task})">
            <summary>
            Instantiate the webserver with or without SSL.
            </summary>
            <param name="hostname">Hostname or IP address on which to listen.</param>
            <param name="port">TCP port on which to listen.</param>
            <param name="ssl">Enable or disable SSL.</param>
            <param name="pfxCertFilename">For SSL, the PFX certificate filename.</param>
            <param name="pfxCertPassword">For SSL, the PFX certificate password.</param>
            <param name="defaultRoute">Default route.</param>
        </member>
        <member name="M:HttpServerLite.Webserver.Dispose">
            <summary>
            Dispose of the object.
            Do not use the object after disposal.
            </summary>
        </member>
        <member name="M:HttpServerLite.Webserver.Start">
            <summary>
            Start accepting new connections.
            </summary>
        </member>
        <member name="M:HttpServerLite.Webserver.Stop">
            <summary>
            Stop accepting new connections.
            </summary>
        </member>
        <member name="M:HttpServerLite.Webserver.Dispose(System.Boolean)">
            <summary>
            Tear down the server and dispose of background workers.
            Do not use the object after disposal.
            </summary>
            <param name="disposing">Indicate if resources should be disposed.</param>
        </member>
        <member name="T:HttpServerLite.WebserverEvents">
            <summary>
            Events to fire when various events are encountered.
            </summary>
        </member>
        <member name="F:HttpServerLite.WebserverEvents.Logger">
            <summary>
            Method to use for sending log messages.
            </summary>
        </member>
        <member name="E:HttpServerLite.WebserverEvents.ConnectionReceived">
            <summary>
            Event to fire when a connection is received.
            string: IP address of the client.
            int: Source TCP port of the client.
            </summary>
        </member>
        <member name="E:HttpServerLite.WebserverEvents.RequestReceived">
            <summary>
            Event to fire when a request is received. 
            </summary>
        </member>
        <member name="E:HttpServerLite.WebserverEvents.RequestDenied">
            <summary>
            Event to fire when a request is denied due to access control. 
            </summary>
        </member>
        <member name="E:HttpServerLite.WebserverEvents.ResponseSent">
            <summary>
            Event to fire when a response is sent. 
            </summary>
        </member>
        <member name="E:HttpServerLite.WebserverEvents.Exception">
            <summary>
            Event to fire when an exception is encountered. 
            </summary>
        </member>
        <member name="E:HttpServerLite.WebserverEvents.ServerStarted">
            <summary>
            Event to fire when the server is started.
            </summary>
        </member>
        <member name="E:HttpServerLite.WebserverEvents.ServerStopped">
            <summary>
            Event to fire when the server is stopped.
            </summary>
        </member>
        <member name="E:HttpServerLite.WebserverEvents.ServerDisposing">
            <summary>
            Event to fire when the server is being disposed.
            </summary>
        </member>
        <member name="M:HttpServerLite.WebserverEvents.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:HttpServerLite.WebserverPages">
            <summary>
            Default pages served by the webserver.
            </summary>
        </member>
        <member name="P:HttpServerLite.WebserverPages.Default404Page">
            <summary>
            Page displayed when sending a 404 due to a lack of a route.
            </summary>
        </member>
        <member name="P:HttpServerLite.WebserverPages.Default500Page">
            <summary>
            Page displayed when sending a 500 due to an exception is unhandled within your routes.
            </summary>
        </member>
        <member name="M:HttpServerLite.WebserverPages.#ctor">
            <summary>
            Default pages served by the webserver.
            </summary>
        </member>
        <member name="T:HttpServerLite.WebserverPages.Page">
            <summary>
            Page served by Watson webserver.
            </summary>
        </member>
        <member name="P:HttpServerLite.WebserverPages.Page.ContentType">
            <summary>
            Content type.
            </summary>
        </member>
        <member name="P:HttpServerLite.WebserverPages.Page.Content">
            <summary>
            Content.
            </summary>
        </member>
        <member name="M:HttpServerLite.WebserverPages.Page.#ctor(System.String,System.String)">
            <summary>
            Page served by Watson webserver.
            </summary>
            <param name="contentType">Content type.</param>
            <param name="content">Content.</param>
        </member>
        <member name="T:HttpServerLite.WebserverRoutes">
            <summary>
            Webserver routes.
            </summary>
        </member>
        <member name="P:HttpServerLite.WebserverRoutes.Preflight">
            <summary>
            Function to call when a preflight (OPTIONS) request is received.  
            Often used to handle CORS.  
            Leave null to use the default OPTIONS handler.
            </summary>
        </member>
        <member name="F:HttpServerLite.WebserverRoutes.PreRouting">
            <summary>
            Function to call prior to routing.  
            Return 'true' if the connection should be terminated.
            Return 'false' to allow the connection to continue routing.
            </summary>
        </member>
        <member name="P:HttpServerLite.WebserverRoutes.Content">
            <summary>
            Content routes; i.e. routes to specific files or folders for GET and HEAD requests.
            </summary>
        </member>
        <member name="P:HttpServerLite.WebserverRoutes.ContentHandler">
            <summary>
            Handler for content route requests.
            </summary>
        </member>
        <member name="P:HttpServerLite.WebserverRoutes.Static">
            <summary>
            Static routes; i.e. routes with explicit matching and any HTTP method.
            </summary>
        </member>
        <member name="P:HttpServerLite.WebserverRoutes.Parameter">
            <summary>
            Parameter routes; i.e. routes with parameters embedded in the URL, such as /{version}/api/{id}.
            </summary>
        </member>
        <member name="P:HttpServerLite.WebserverRoutes.Dynamic">
            <summary>
            Dynamic routes; i.e. routes with regex matching and any HTTP method.
            </summary>
        </member>
        <member name="P:HttpServerLite.WebserverRoutes.Default">
            <summary>
            Default route; used when no other routes match.
            </summary>
        </member>
        <member name="M:HttpServerLite.WebserverRoutes.#ctor">
            <summary>
            Instantiate the object using default settings.
            </summary>
        </member>
        <member name="M:HttpServerLite.WebserverRoutes.#ctor(System.Func{HttpServerLite.HttpContext,System.Threading.Tasks.Task})">
            <summary>
            Instantiate the object using default settings and the specified default route.
            </summary>
        </member>
        <member name="T:HttpServerLite.WebserverSettings">
            <summary>
            Webserver settings.
            </summary>
        </member>
        <member name="P:HttpServerLite.WebserverSettings.Hostname">
            <summary>
            The hostname or IP address on which to listen.
            </summary>
        </member>
        <member name="P:HttpServerLite.WebserverSettings.Port">
            <summary>
            The port number on which to listen.
            </summary>
        </member>
        <member name="P:HttpServerLite.WebserverSettings.IO">
            <summary>
            Input-output settings.
            </summary>
        </member>
        <member name="P:HttpServerLite.WebserverSettings.Ssl">
            <summary>
            SSL settings.
            </summary>
        </member>
        <member name="P:HttpServerLite.WebserverSettings.Headers">
            <summary>
            Headers that will be added to every response unless previously set.
            </summary>
        </member>
        <member name="P:HttpServerLite.WebserverSettings.AccessControl">
            <summary>
            Access control manager, i.e. default mode of operation, permit list, and deny list.
            </summary>
        </member>
        <member name="P:HttpServerLite.WebserverSettings.Debug">
            <summary>
            Debug logging settings.
            Be sure to set Events.Logger in order to receive debug messages.
            </summary>
        </member>
        <member name="M:HttpServerLite.WebserverSettings.#ctor">
            <summary>
            Instantiate the object using default settings.
            </summary>
        </member>
        <member name="M:HttpServerLite.WebserverSettings.#ctor(System.String,System.Int32)">
            <summary>
            Instantiate the object.
            </summary>
            <param name="hostname">The hostname on which to listen.</param>
            <param name="port">The port on which to listen.</param>
        </member>
        <member name="T:HttpServerLite.WebserverSettings.IOSettings">
            <summary>
            Input-output settings.
            </summary>
        </member>
        <member name="P:HttpServerLite.WebserverSettings.IOSettings.MaxIncomingHeadersSize">
            <summary>
            Maximum number of bytes to read from the network in attempt to read incoming HTTP request headers.
            </summary>
        </member>
        <member name="P:HttpServerLite.WebserverSettings.IOSettings.StreamBufferSize">
            <summary>
            Buffer size to use when interacting with streams.
            </summary>
        </member>
        <member name="P:HttpServerLite.WebserverSettings.IOSettings.ReadTimeoutMs">
            <summary>
            Number of milliseconds to await a read response prior to considering the connection to have timed out.
            </summary>
        </member>
        <member name="M:HttpServerLite.WebserverSettings.IOSettings.#ctor">
            <summary>
            Instantiate the object using default values.
            </summary>
        </member>
        <member name="T:HttpServerLite.WebserverSettings.SslSettings">
            <summary>
            SSL settings.
            </summary>
        </member>
        <member name="F:HttpServerLite.WebserverSettings.SslSettings.Enable">
            <summary>
            Enable or disable SSL.
            </summary>
        </member>
        <member name="F:HttpServerLite.WebserverSettings.SslSettings.PfxCertificateFile">
            <summary>
            PFX certificate filename.
            </summary>
        </member>
        <member name="F:HttpServerLite.WebserverSettings.SslSettings.PfxCertificatePassword">
            <summary>
            PFX certificate password.
            </summary>
        </member>
        <member name="F:HttpServerLite.WebserverSettings.SslSettings.MutuallyAuthenticate">
            <summary>
            Require mutual authentication.
            </summary>
        </member>
        <member name="F:HttpServerLite.WebserverSettings.SslSettings.AcceptInvalidAcertificates">
            <summary>
            Accept invalid certificates including self-signed and those that are unable to be verified.
            </summary>
        </member>
        <member name="M:HttpServerLite.WebserverSettings.SslSettings.#ctor">
            <summary>
            Instantiate the object using default settings.
            </summary>
        </member>
        <member name="M:HttpServerLite.WebserverSettings.SslSettings.#ctor(System.String)">
            <summary>
            Enable SSL using a certificate file that doesn't require a password.
            </summary>
            <param name="pfxCertificateFile">PFX certificate filename.</param>
        </member>
        <member name="M:HttpServerLite.WebserverSettings.SslSettings.#ctor(System.String,System.String)">
            <summary>
            Enable SSL using a certificate file that requires a password.
            </summary>
            <param name="pfxCertificateFile">PFX certificate filename.</param>
            <param name="pfxCertificatePassword">PFX certificate password.</param>
        </member>
        <member name="T:HttpServerLite.WebserverSettings.HeaderSettings">
            <summary>
            Headers that will be added to every response unless previously set.
            </summary>
        </member>
        <member name="F:HttpServerLite.WebserverSettings.HeaderSettings.IncludeContentLength">
            <summary>
            Automatically set content length if not already set.
            </summary>
        </member>
        <member name="F:HttpServerLite.WebserverSettings.HeaderSettings.AccessControlAllowOrigin">
            <summary>
            Access-Control-Allow-Origin header.
            </summary>
        </member>
        <member name="F:HttpServerLite.WebserverSettings.HeaderSettings.AccessControlAllowMethods">
            <summary>
            Access-Control-Allow-Methods header.
            </summary>
        </member>
        <member name="F:HttpServerLite.WebserverSettings.HeaderSettings.AccessControlAllowHeaders">
            <summary>
            Access-Control-Allow-Headers header.
            </summary>
        </member>
        <member name="F:HttpServerLite.WebserverSettings.HeaderSettings.AccessControlExposeHeaders">
            <summary>
            Access-Control-Expose-Headers header.
            </summary>
        </member>
        <member name="F:HttpServerLite.WebserverSettings.HeaderSettings.Accept">
            <summary>
            Accept header.
            </summary>
        </member>
        <member name="F:HttpServerLite.WebserverSettings.HeaderSettings.AcceptLanguage">
            <summary>
            Accept-Language header.
            </summary>
        </member>
        <member name="F:HttpServerLite.WebserverSettings.HeaderSettings.AcceptCharset">
            <summary>
            Accept-Charset header.
            </summary>
        </member>
        <member name="F:HttpServerLite.WebserverSettings.HeaderSettings.Connection">
            <summary>
            Connection header.
            </summary>
        </member>
        <member name="F:HttpServerLite.WebserverSettings.HeaderSettings.Host">
            <summary>
            Host header.
            </summary>
        </member>
        <member name="M:HttpServerLite.WebserverSettings.HeaderSettings.#ctor">
            <summary>
            Instantiate the object.
            </summary> 
        </member>
        <member name="T:HttpServerLite.WebserverSettings.DebugSettings">
            <summary>
            Debug logging settings.
            Be sure to set Events.Logger in order to receive debug messages.
            </summary>
        </member>
        <member name="F:HttpServerLite.WebserverSettings.DebugSettings.AccessControl">
            <summary>
            Enable or disable debug logging of access control.
            </summary>
        </member>
        <member name="F:HttpServerLite.WebserverSettings.DebugSettings.Routing">
            <summary>
            Enable or disable debug logging of routing.
            </summary>
        </member>
        <member name="F:HttpServerLite.WebserverSettings.DebugSettings.Connections">
            <summary>
            Enable or disable debug logging of connections.
            </summary>
        </member>
        <member name="F:HttpServerLite.WebserverSettings.DebugSettings.Tcp">
            <summary>
            Enable or disable debug logging of the underlying TCP library.
            </summary>
        </member>
        <member name="F:HttpServerLite.WebserverSettings.DebugSettings.Requests">
            <summary>
            Enable or disable debug logging of requests.
            </summary>
        </member>
        <member name="F:HttpServerLite.WebserverSettings.DebugSettings.Responses">
            <summary>
            Enable or disable debug logging of responses.
            </summary>
        </member>
        <member name="M:HttpServerLite.WebserverSettings.DebugSettings.#ctor">
            <summary>
            Instantiate the object.
            </summary> 
        </member>
        <member name="T:HttpServerLite.WebserverStatistics">
            <summary>
            Webserver statistics.
            </summary>
        </member>
        <member name="P:HttpServerLite.WebserverStatistics.StartTime">
            <summary>
            The time at which the client or server was started.
            </summary>
        </member>
        <member name="P:HttpServerLite.WebserverStatistics.UpTime">
            <summary>
            The amount of time which the client or server has been up.
            </summary>
        </member>
        <member name="P:HttpServerLite.WebserverStatistics.ReceivedPayloadBytes">
            <summary>
            The number of payload bytes received (incoming request body).
            </summary>
        </member>
        <member name="P:HttpServerLite.WebserverStatistics.SentPayloadBytes">
            <summary>
            The number of payload bytes sent (outgoing request body).
            </summary>
        </member>
        <member name="M:HttpServerLite.WebserverStatistics.#ctor">
            <summary>
            Initialize the statistics object.
            </summary>
        </member>
        <member name="M:HttpServerLite.WebserverStatistics.ToString">
            <summary>
            Human-readable version of the object.
            </summary>
            <returns>String.</returns>
        </member>
        <member name="M:HttpServerLite.WebserverStatistics.Reset">
            <summary>
            Reset statistics other than StartTime and UpTime.
            </summary>
        </member>
        <member name="M:HttpServerLite.WebserverStatistics.RequestCountByMethod(HttpServerLite.HttpMethod)">
            <summary>
            Retrieve the number of requests received using a specific HTTP method.
            </summary>
            <param name="method">HTTP method.</param>
            <returns>Number of requests received using this method.</returns>
        </member>
    </members>
</doc>
